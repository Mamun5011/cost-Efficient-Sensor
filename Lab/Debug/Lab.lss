
Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000252  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000144  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000187  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000193  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000010d  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CurrMatrix>:
{0b11111111,0b11111111,0b11111101,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111},
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111,0b11111111,0b11111111},
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111}};
	
void CurrMatrix()
{
  82:	e0 e7       	ldi	r30, 0x70	; 112
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	a0 e6       	ldi	r26, 0x60	; 96
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	28 e7       	ldi	r18, 0x78	; 120
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <CurrMatrix+0x26>
	for (int j=0;j<8;j++)
	{
		for (int n=0;n<50;n++)
		{ //to catch eye
			PORTA = PORTS[j];// ROW
  90:	40 81       	ld	r20, Z
  92:	4b bb       	out	0x1b, r20	; 27
			unsigned int tempAlpha = curr[j];
			
			PORTD = tempAlpha;//show character (COLUMN)
  94:	4c 91       	ld	r20, X
  96:	42 bb       	out	0x12, r20	; 18
  98:	01 97       	sbiw	r24, 0x01	; 1
	
void CurrMatrix()
{
	for (int j=0;j<8;j++)
	{
		for (int n=0;n<50;n++)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	c9 f7       	brne	.-14     	; 0x90 <CurrMatrix+0xe>
  9e:	31 96       	adiw	r30, 0x01	; 1
  a0:	12 96       	adiw	r26, 0x02	; 2
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111,0b11111111,0b11111111},
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111}};
	
void CurrMatrix()
{
	for (int j=0;j<8;j++)
  a2:	e2 17       	cp	r30, r18
  a4:	f3 07       	cpc	r31, r19
  a6:	19 f0       	breq	.+6      	; 0xae <CurrMatrix+0x2c>
{0b11111111,0b11111111,0b11111101,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111},
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111,0b11111111,0b11111111},
{0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111101,0b11111111}};
	
void CurrMatrix()
{
  a8:	82 e3       	ldi	r24, 0x32	; 50
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	f1 cf       	rjmp	.-30     	; 0x90 <CurrMatrix+0xe>
  ae:	08 95       	ret

000000b0 <ClearMatrix>:
	}
	
}

void ClearMatrix()
{
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	20 e7       	ldi	r18, 0x70	; 112
  b6:	30 e0       	ldi	r19, 0x00	; 0
int i;
for(i=0;i<8;i++)curr[i] |=0xFF;	
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	8f 6f       	ori	r24, 0xFF	; 255
  be:	81 93       	st	Z+, r24
  c0:	91 93       	st	Z+, r25
  c2:	e2 17       	cp	r30, r18
  c4:	f3 07       	cpc	r31, r19
  c6:	c1 f7       	brne	.-16     	; 0xb8 <ClearMatrix+0x8>
		
}
  c8:	08 95       	ret

000000ca <main>:
	
int main(void)
{
	DDRD = 0xFF;//PORTB,C,D are set as output
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;
  d0:	14 ba       	out	0x14, r1	; 20
	DDRB = 0x0F;
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	87 bb       	out	0x17, r24	; 23
	
	while(1)
	{
		//testMatrix();			
       int previousK=-1,i,j;
	   for(i=0;i<16;i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	c1 2c       	mov	r12, r1
  dc:	d1 2c       	mov	r13, r1
  de:	00 e6       	ldi	r16, 0x60	; 96
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	0f 2e       	mov	r0, r31
  e4:	f0 e7       	ldi	r31, 0x70	; 112
  e6:	ef 2e       	mov	r14, r31
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ff 2e       	mov	r15, r31
  ec:	f0 2d       	mov	r31, r0
  ee:	1d c0       	rjmp	.+58     	; 0x12a <main+0x60>
	   {
		   if((PINC & 0b10000000)){
  f0:	9f 99       	sbic	0x13, 7	; 19
			   ClearMatrix();
  f2:	0e 94 58 00 	call	0xb0	; 0xb0 <ClearMatrix>
		   }
		  PORTB=i  ;
  f6:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	00 00       	nop
		  _delay_us(1);
		  if((PINC & 0b00000001)){
  fa:	98 9b       	sbis	0x13, 0	; 19
  fc:	15 c0       	rjmp	.+42     	; 0x128 <main+0x5e>
  fe:	de 01       	movw	r26, r28
 100:	a2 95       	swap	r26
 102:	b2 95       	swap	r27
 104:	b0 7f       	andi	r27, 0xF0	; 240
 106:	ba 27       	eor	r27, r26
 108:	a0 7f       	andi	r26, 0xF0	; 240
 10a:	ba 27       	eor	r27, r26
 10c:	a8 58       	subi	r26, 0x88	; 136
 10e:	bf 4f       	sbci	r27, 0xFF	; 255
 110:	f8 01       	movw	r30, r16
			  //previousK=i;
			for (j = 0; j < 8; j++)
			{
				curr[j] &= ALPHA[i][j];
 112:	8d 91       	ld	r24, X+
 114:	9d 91       	ld	r25, X+
 116:	20 81       	ld	r18, Z
 118:	31 81       	ldd	r19, Z+1	; 0x01
 11a:	82 23       	and	r24, r18
 11c:	93 23       	and	r25, r19
 11e:	81 93       	st	Z+, r24
 120:	91 93       	st	Z+, r25
		   }
		  PORTB=i  ;
		  _delay_us(1);
		  if((PINC & 0b00000001)){
			  //previousK=i;
			for (j = 0; j < 8; j++)
 122:	ee 15       	cp	r30, r14
 124:	ff 05       	cpc	r31, r15
 126:	a9 f7       	brne	.-22     	; 0x112 <main+0x48>
	
	while(1)
	{
		//testMatrix();			
       int previousK=-1,i,j;
	   for(i=0;i<16;i++)
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	d1 05       	cpc	r29, r1
 12e:	04 f3       	brlt	.-64     	; 0xf0 <main+0x26>
		  //if(previousK!=-1){
			  //ShapeMatrix(previousK);
		  //}
		  //previousK=-1;
	   }
		CurrMatrix();
 130:	0e 94 41 00 	call	0x82	; 0x82 <CurrMatrix>
	
	while(1)
	{
		//testMatrix();			
       int previousK=-1,i,j;
	   for(i=0;i<16;i++)
 134:	cc 2d       	mov	r28, r12
 136:	dd 2d       	mov	r29, r13
		  //previousK=-1;
	   }
		CurrMatrix();
	   //_delay_ms(100);
	   
	}
 138:	f8 cf       	rjmp	.-16     	; 0x12a <main+0x60>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
